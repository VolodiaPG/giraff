# Using the corresponding command in the justfile, it will run the experiments
# on the current computer. Limitations include no network tweaking between the
# nodes and the size of the host
VAGRANT=false

# For Grid'5000
# the cluster to run the experiment on
CLUSTER="gros"
DEPLOYMENT_WALLTIME=01:00:00
#RESERVATION="2023-07-07 23:47:00"

# Whether the dev mode should be enabled (reproducible name, sleeps in the end
# to retain access, etc.)
DEV="true"
# Should a predefinied fog network be used; defined in definitions.py
DEV_NETWORK="true"
DEV_SLEEP_AFTER_CRASH="false"
DEV_SLEEP_AFTER_OK="false"

# Latency types
# Functions that do not care about latency
NO_LATENCY=1000        #ms
SUPER_NO_LATENCY=10000 #ms
# Functions that are ok with cloud-like latencies
HIGH_LATENCY=75    #ms
HIGHER_LATENCY=200 #ms
# Functions that want low latency
LOW_LATENCY=20 #ms

# Tweaks to the arrival algorithm defined in the expe go application
DURATION_MULTIPLIER="25000"
ARRIVAL_REQUEST_MULTIPLIER="50000"

PING_REQUEST_TIMEOUT_SEC=100

# When does the function instantiation period finish? (s)
# can be overriden in other .env.*
EXPERIMENT_DURATION=300

# Additional tweaking of the reservation behaviour of the functions
FUNCTION_COLD_START_OVERHEAD=1000 # ms
FUNCTION_STOP_OVERHEAD=40000      # ms
FUNCTION_MIN_DURATION=40000       # ms

# What functions/chains to use in this experiment. All images will be cached
# FUNCTION_DESCRIPTIONS="pipelines/image-classification.jsonc pipelines/audio-sentiment.jsonc pipelines/image-classification-higher.jsonc pipelines/audio-sentiment-higher.jsonc"
FUNCTION_DESCRIPTIONS="pipelines/giraff_app.json5"

# Usually defined in the other env files to make a scenario
#NB_IMAGE_FUNCTIONS=2
#NB_AUDIO_FUNCTIONS=2

# Wait time for the experience, after the time taken to deploy all the functions (s)
WAIT_TIME=0
# space-separated list for all the different placement algorithms to experiment
# upon. They are defined in the manager folder. The full list can be obtained
# with the nix flake show command.
# Note that there should be the same number of fog node image market images.
# They work in pairs.
#FOG_NODE_IMAGE_TAGS="fog_node-edge_first-quadratic_rates-no_complication fog_node-edge_ward-quadratic_rates-no_complication fog_node-auction-quadratic_rates-no_complication fog_node-mincpurandom-quadratic_rates-no_complication fog_node-edge_furthest-quadratic_rates-no_complication"
#MARKET_IMAGE_TAGS="market-default_strategy market-default_strategy market-default_strategy market-mincpurandom market-default_strategy"

FOG_NODE_IMAGE_TAGS="fog_node-auction-quadratic_rates-no_complication"
MARKET_IMAGE_TAGS="market-default_strategy"

#FOG_NODE_IMAGE_TAGS="fog_node-edge_first-quadratic_rates-no_complication"
#MARKET_IMAGE_TAGS="market-default_strategy"

# Some of the variables can be changed to make different scenarios. This work
# alongside the .experiments variation of VM numbers
ENV_VARIATIONS=".env.1"

# What images of the Fog node to test, the experiment will test them one after the other, do not forget to reserve the correct amount of time!
# In the end, the following variables break down a URL like:  ghcr.io/volodiapg/giraff:auction_valuation_rates_no-telemetry
COMMON_IMAGE_NAME=giraff-dev
# The registry to use
IMAGE_REGISTRY=ghcr.io/volodiapg

# Off limits
MARKET_LOCAL_PORT=30008
IOT_LOCAL_PORT=3003

INFLUX_TOKEN="xowyTh1iGcNAZsZeydESOHKvENvcyPaWg8hUe3tO4vPOw_buZVwOdUrqG3gwV314aYd9SWKHcxlykcQY_rwYVQ=="
INFLUX_ORG="faasfog"
INFLUX_BUCKET="faasfog"
INFLUX_ADDRESS="127.0.0.1:9086"
