#KUBECONFIG :=  env_var('HOME') / ".kube" / "config"

KUBECONFIG := ".." / "testbed" / "iso" / "vm.kubeconfig"
RUST_LOG := "warn,fog_node=trace,faas=trace,openfaas=trace,kube_metrics=warn,helper=warn,market=trace,actix=warn"
DOCKER := env_var_or_default("DOCKER", "podman")
MARKET_PORT := "30008"
PROMETHEUS_PORT := "3090"
PROMETHEUS_PORT_PUSH := "3091"

# Default command when no verb specified
_default:
    @just --list

# Build a target (market or fog_node)
build *FLAGS:
    cargo build {{ FLAGS }}

pre_commit:
    @nix develop .#manager -c just check
    @nix develop .#manager -c just check "clippy"
    @nix develop .#manager -c cargo fmt
    @nix develop .#manager -c just check "test"

# Run cargo check
check subcommand="check":
    #!/usr/bin/env bash
    set -ex
    just _{{ subcommand }} --features quadratic_rates,auction
    just _{{ subcommand }} --features linear_rates,auction

    just _{{ subcommand }} --features linear_rates,edge_first
    just _{{ subcommand }} --features linear_rates,edge_furthest
    # just _{{ subcommand }} --features cloud_only
    # just _{{ subcommand }} --features cloud_only_v2
    just _{{ subcommand }} --features linear_rates,edge_ward
    # just _{{ subcommand }} --features edge_ward_v2
    just _{{ subcommand }} --features linear_rates,edge_ward_v3
    just _{{ subcommand }} --features random,quadratic_rates,maxcpu
    just _{{ subcommand }} --features quadratic_rates,mincpurandom
    just _{{ subcommand }} --features quadratic_rates,auction,reduction
    just _{{ subcommand }} --features quadratic_rates,mincpurandom,reduction

    just _{{ subcommand }} --features quadratic_rates,mincpurandom,offline
    just _{{ subcommand }} --features quadratic_rates,mincpurandom,offline,reduction

test: (check "test")

# Check outdated or unused deps (req. cargo-outdated + updeps create)
check_deps:
    cargo outdated -R
    cargo udeps --all-targets

_test *FLAGS:
    #!/usr/bin/env bash
    export FUNCTION_LIVE_TIMEOUT_MSECS=1000
    export RATIO_AA="0.1"
    export RATIO_BB="0.4"
    export ELECTRICITY_PRICE=1

    export RUST_TEST_THREADS=$(nproc)
    export RUST_LOG=${RUST_LOG:-"error"}
    cargo test {{ FLAGS }}

_flame *FLAGS:
    #!/usr/bin/env bash
    export FUNCTION_LIVE_TIMEOUT_MSECS=1000
    export RATIO_AA=1
    export RATIO_BB=1
    export RATIO_CC=1
    export ELECTRICITY_PRICE=1

    export RUST_TEST_THREADS=$(nproc)

    cargo flamegraph --dev --unit-test fog_node {{ FLAGS }}

_check *FLAGS:
    cargo check {{ FLAGS }}

_clippy *FLAGS:
    cargo clippy --fix --allow-staged --allow-dirty {{ FLAGS }}  -- -A clippy::let_unit_value -D warnings

# Run the market
run_market jaeger *FLAGS:
    SERVER_PORT={{ MARKET_PORT }} \
     RUST_LOG={{ RUST_LOG }} \
     INFLUX_ADDRESS="127.0.0.1:9086" \
     INFLUX_TOKEN="xowyTh1iGcNAZsZeydESOHKvENvcyPaWg8hUe3tO4vPOw_buZVwOdUrqG3gwV314aYd9SWKHcxlykcQY_rwYVQ==" \
     INFLUX_ORG="faasfog" \
     INFLUX_BUCKET="faasfog" \
     INSTANCE_NAME="marketplace" \
     ENABLE_COLLECTOR="{{ jaeger }}" \
     cargo run --bin market {{ FLAGS }}

# Run the node, type is market or else (generic fog_node)
run_fog_node node_type MY_IP_ADDRESS MY_IP_ADDRESS_PRIVATE jaeger="false":
    #!.venv/bin/python
    import os
    import base64
    import subprocess

    node_type = "{{ node_type }}"

    nodes = {}

    nodes["market"] = ('''(
        situation: MarketConnected (
            market_ip: "127.0.0.1",
            market_port: "{{ MARKET_PORT }}",
        ),
        my_id: "d2f7de01-d7e5-4afc-bc76-fb5c0e79ec7a",
        my_public_ip: "{{MY_IP_ADDRESS}}",
        my_private_ip: "{{MY_IP_ADDRESS_PRIVATE}}",
        my_public_port_http: "3030",
        reserved_cpu: "8 cpus",
        reserved_memory: "4 GiB",
        tags: ["market connected"],
        max_in_flight_functions_proposals: MaxInFlight(30),
        my_advertised_bandwidth: "1 Gb/s"
    )''',0)

    nodes["node_1"] = ('''(
        situation: NodeConnected (
            parent_id: "d2f7de01-d7e5-4afc-bc76-fb5c0e79ec7a",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3030",
            parent_latency: "2 ms"
        ),
        my_id: "fd4f121d-6b3d-44ca-8b82-906959abaa3f",
        my_public_ip: "{{MY_IP_ADDRESS}}",
        my_private_ip: "{{MY_IP_ADDRESS_PRIVATE}}",
        my_public_port_http: "3032",
        reserved_cpu: "3 cpu",
        reserved_memory: "4 GiB",
        tags: ["node_connected_1"],
        max_in_flight_functions_proposals: MaxInFlight(20),
        my_advertised_bandwidth: "1 Gb/s"
    )''',1)

    nodes["node_12"] = ('''(
        situation: NodeConnected (
            parent_id: "d2f7de01-d7e5-4afc-bc76-fb5c0e79ec7a",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3030",
            parent_latency: "4 ms"
        ),
        my_id: "fd4f121d-6b3d-44ca-8b82-90695aabaa3f",
        my_public_ip: "{{MY_IP_ADDRESS}}",
        my_private_ip: "{{MY_IP_ADDRESS_PRIVATE}}",
        my_public_port_http: "3050",
        reserved_cpu: "3 cpu",
        reserved_memory: "4 GiB",
        tags: ["node_connected_12"],
        max_in_flight_functions_proposals: MaxInFlight(20),
        my_advertised_bandwidth: "1 Gb/s"
    )''',2)

    nodes["node_2"] = ('''(
        situation: NodeConnected (
            parent_id: "fd4f121d-6b3d-44ca-8b82-906959abaa3f",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3032",
            parent_latency: "20 ms"
        ),
        my_id: "4b1a3a31-8130-431a-8a08-8a5be3becc3b",
        my_public_ip: "{{MY_IP_ADDRESS}}",
        my_private_ip: "{{MY_IP_ADDRESS_PRIVATE}}",
        my_public_port_http: "3034",
        reserved_cpu: "2 cpu",
        reserved_memory: "1500 MiB",
        tags: ["node_connected_2"],
        max_in_flight_functions_proposals: MaxInFlight(15),
        my_advertised_bandwidth: "1 Gb/s"
    )''',3)

    # Must be that port so expe.sh works magically
    nodes["node_3"] = ('''(
        situation: NodeConnected (
            parent_id: "4b1a3a31-8130-431a-8a08-8a5be3becc3b",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3034",
            parent_latency: "10 ms"
        ),
        my_id: "c132ee95-5368-4bc8-9dfd-227eb77da5fc",
        my_public_ip: "{{MY_IP_ADDRESS}}",
        my_private_ip: "{{MY_IP_ADDRESS_PRIVATE}}",
        my_public_port_http: "3036",
        reserved_cpu: "3 cpu",
        reserved_memory: "4 GiB",
        tags: ["node_connected_3"],
        max_in_flight_functions_proposals: MaxInFlight(10),
        my_advertised_bandwidth: "1 Gb/s"
    )''',4)

    nodes["node_34"] = ('''(
        situation: NodeConnected (
            parent_id: "4b1a3a31-8130-431a-8a08-8a5be3becc3b",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3034",
            parent_latency: "6 ms"
        ),
        my_id: "d132ee95-5368-4bc8-9dfd-227eb77da5fc",
        my_public_ip: "{{MY_IP_ADDRESS}}",
        my_private_ip: "{{MY_IP_ADDRESS_PRIVATE}}",
        my_public_port_http: "3038",
        reserved_cpu: "3 cpu",
        reserved_memory: "4 GiB",
        tags: ["node_connected_34"],
        max_in_flight_functions_proposals: MaxInFlight(10),
        my_advertised_bandwidth: "100 Mb/s"
    )''',4)


    nodes["node_35"] = ('''(
        situation: NodeConnected (
            parent_id: "4b1a3a31-8130-431a-8a08-8a5be3becc3b",
            parent_node_ip: "127.0.0.1",
            parent_node_port_http: "3034",
            parent_latency: "1 ms"
        ),
        my_id: "e132ee95-5368-4bc8-9dfd-227eb77da5fc",
        my_public_ip: "{{MY_IP_ADDRESS}}",
        my_private_ip: "{{MY_IP_ADDRESS_PRIVATE}}",
        my_public_port_http: "3037",
        reserved_cpu: "3 cpu",
        reserved_memory: "4 GiB",
        tags: ["node_connected_35"],
        max_in_flight_functions_proposals: MaxInFlight(10),
        my_advertised_bandwidth: "100 Mb/s"
    )''',4)

    if node_type not in nodes:
        print(f"Wrong node name, select one of the following: {','.join(nodes.keys())}")
        exit(1)
    config,level = nodes[node_type]

    env_vars = {}
    env_vars['CONFIG'] = base64.b64encode(bytes(config, "utf-8")).decode("utf-8")
    env_vars['OPENFAAS_USERNAME'] = "admin"
    try:
      env_vars['OPENFAAS_PASSWORD'] = base64.b64decode(subprocess.getoutput('KUBECONFIG={{ KUBECONFIG }} kubectl get secret -n openfaas basic-auth -o jsonpath="{.data.basic-auth-password}"')).decode("utf-8")
    except:
      pass

    env_vars['KUBECONFIG'] = "{{ KUBECONFIG }}"
    env_vars['OPENFAAS_PORT_EXTERNAL'] = "31112"
    env_vars['OPENFAAS_PORT_INTERNAL'] = "31112"
    env_vars['RUST_LOG'] = "{{ RUST_LOG }}"
    env_vars['LOG_CONFIG_FILENAME'] = "{{ node_type }}.log"
    env_vars['COLLECTOR_IP'] = "127.0.0.1"
    env_vars['OTEL_EXPORTER_OTLP_ENDPOINT_FUNCTION']="http://10.42.0.1:4317"
    env_vars['ENABLE_COLLECTOR'] = "{{ jaeger }}"

    env_vars['INFLUX_ADDRESS']="10.42.0.1:9086"
    env_vars['INFLUX_TOKEN']="xowyTh1iGcNAZsZeydESOHKvENvcyPaWg8hUe3tO4vPOw_buZVwOdUrqG3gwV314aYd9SWKHcxlykcQY_rwYVQ=="
    env_vars['INFLUX_ORG']="faasfog"
    env_vars['INFLUX_BUCKET']="faasfog"
    env_vars['INSTANCE_NAME']="{{ node_type }}"

    env_vars['FUNCTION_LIVE_TIMEOUT_MSECS']="120000"
    env_vars['PRICING_CPU']="1.0"
    env_vars['PRICING_MEM']="0.5"
    env_vars['PRICING_CPU_INITIAL']="1.0"
    env_vars['PRICING_MEM_INITIAL']="1.0"
    env_vars['PRICING_GEOLOCATION']="1.0"

    env_vars['RATIO_AA']="0.1"
    env_vars['RATIO_BB']="0.4"
    env_vars['ELECTRICITY_PRICE']=level if level > 0 else 1

    if "{{ node_type }}" in ["node_1", "node_2"]:
        env_vars['IS_CLOUD'] = "is_cloud"

    env_str = " ".join([f'{key}="{value}"' for key, value in env_vars.items()])
    cmd = f'{env_str} ./target/debug/fog_node'

    print(cmd)
    os.system(cmd)

run MY_IP_ADDRESS MY_IP_ADDRESS_PRIVATE jaeger="false" *FLAGS="": (build FLAGS)
    mprocs "just run_fog_node market {{ MY_IP_ADDRESS }} {{MY_IP_ADDRESS_PRIVATE}} {{ jaeger }}" \
      "just run_fog_node node_2 {{ MY_IP_ADDRESS }} {{MY_IP_ADDRESS_PRIVATE}} {{ jaeger }}" \
      "just run_fog_node node_3 {{ MY_IP_ADDRESS }} {{MY_IP_ADDRESS_PRIVATE}} {{ jaeger }}" \
      "just run_fog_node node_1 {{ MY_IP_ADDRESS }} {{MY_IP_ADDRESS_PRIVATE}} {{ jaeger }}" \
      "just run_fog_node node_12 {{ MY_IP_ADDRESS }} {{MY_IP_ADDRESS_PRIVATE}} {{ jaeger }}" \
      "just run_fog_node node_34 {{ MY_IP_ADDRESS }} {{MY_IP_ADDRESS_PRIVATE}} {{ jaeger }}" \
      "just run_fog_node node_35 {{ MY_IP_ADDRESS }} {{MY_IP_ADDRESS_PRIVATE}} {{ jaeger }}" \
      "just run_market {{ jaeger }}  {{ FLAGS }}"

expe localhost_ip OFFLINE_MODE="false":
    #!/usr/bin/env bash
    cd {{ justfile_directory() }}/../testbed
    nix develop .#testbed -c sh -c 'export EXPE_SAVE_FILE=./requests.env.local NODES_IP=127.0.0.1 TARGET_NODE_NAMES="node_34" OVERRIDE_FIRST_NODE_IP=127.0.0.1 OVERRIDE_FUNCTION_IP=127.0.0.1 MARKET_LOCAL_PORT={{ MARKET_PORT }}; just expe .env.local 127.0.0.1 {{ localhost_ip }} "d132ee95-5368-4bc8-9dfd-227eb77da5fc"'
    nix develop .#testbed -c sh -c "export EXPE_LOAD_FILE=./requests.env.local NODES_IP=127.0.0.1 TARGET_NODE_NAMES=\"node_34\" OVERRIDE_FIRST_NODE_IP=127.0.0.1 OVERRIDE_FUNCTION_IP=127.0.0.1 MARKET_LOCAL_PORT={{ MARKET_PORT }} OFFLINE_MODE={{ OFFLINE_MODE }} DEV=true COLLECTOR_URL="localhost:4317"; just expe .env.local 127.0.0.1 {{ localhost_ip }} \"d132ee95-5368-4bc8-9dfd-227eb77da5fc\""

_ghcr user image:
    #!/usr/bin/env bash
    output=`$(nix build ".#{{ image }}" --print-out-paths --no-link --quiet) | gzip --fast -q | skopeo --insecure-policy copy -q docker-archive:/dev/stdin docker://ghcr.io/{{ user }}/giraff:{{ image }} 2>&1`
    retVal=$?
    if [ $retVal -ne 0 ]; then
      echo -e "[{{ file_name(justfile_directory()) }}] {{ image }} \033[31mFAILED\033[0m"
      echo -e $output
      exit $retVal
    fi
    echo -e "[{{ file_name(justfile_directory()) }}] {{ image }} \033[32mOK\033[0m"

# Push container images o ghcr.
ghcr user +images:
    #!/usr/bin/env bash
    set -e
    parallel --halt-on-error 2 --will-cite just _ghcr {{ user }} {1} ::: {{ images }}

collect:
    cd ../testbed && nix develop .#testbed -c sh -c 'export SAVE_NETWORK_FILE=/dev/null EXPE_LOAD_FILE=./requests INFLUX_ADDRESS=127.0.0.1:9086; just collect'
